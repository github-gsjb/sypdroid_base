package com.android.apparatus.files;import android.app.Activity;import android.database.Cursor;import android.net.Uri;import android.provider.MediaStore;import com.android.apparatus.files.FileType.MimeType;import com.android.apparatus.utils.FileUtils;import net.majorkernelpanic.spydroid.R;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class FileManager {	private static FileManager instance;	private final Map<String, MimeType> map;// mimeType¼¯ºÏ	private final Map<MimeType, Integer> resMap;// mimeType¶ÔÓ¦Í¼Æ¬×ÊÔ´¼¯ºÏ	private final List<FileType> choosedFiles;// ÒÑÑ¡ÔñÎÄ¼þ¼¯ºÏ	public static FileManager getInstance() {		if (null == instance) {			instance = new FileManager();		}		return instance;	}	// ³õÊ¼»¯Êý¾Ý	private FileManager() {		map = new HashMap<String, MimeType>();		map.put(".3gp", MimeType.VIDEO);		map.put(".mp4", MimeType.VIDEO);		map.put(".rmvb", MimeType.VIDEO);		map.put(".mpg", MimeType.VIDEO);		map.put(".avi", MimeType.VIDEO);		map.put(".jpeg", MimeType.IMAGE);		map.put(".jpg", MimeType.IMAGE);		map.put(".png", MimeType.IMAGE);		resMap = new HashMap<MimeType, Integer>();		resMap.put(MimeType.IMAGE, R.drawable.file_jpg);		resMap.put(MimeType.VIDEO, R.drawable.file_video);		resMap.put(MimeType.UNKNOWN, R.drawable.file_unknow);		choosedFiles = new ArrayList<FileType>();	}	public MimeType getMimeType(String exspansion) {		return map.get(exspansion.toLowerCase());	}	public Integer getMimeDrawable(MimeType type) {		return resMap.get(type);	}	// ÒÑÑ¡ÔñÎÄ¼þ¼¯ºÏ	public List<FileType> getChoosedFiles() {		return choosedFiles;	}	// ÒÑÑ¡ÔñÎÄ¼þ´óÐ¡	public String getFilesSizes() {		long sum = 0;		for (FileType f : choosedFiles) {			sum += f.getFileSize();		}		return FileUtils.getFileSizeStr(sum);	}	// ÒÑÑ¡ÔñÎÄ¼þÊý	public int getFilesCnt() {		return choosedFiles.size();	}	public void clear() {		choosedFiles.clear();	}	// ²éÕÒexternal¶àÃ½ÌåÎÄ¼þ	public synchronized List<FileType> getMediaFiles(Activity cxt, Uri uri) {		Cursor mCursor = cxt.managedQuery(uri, new String[] { MediaStore.Audio.Media.DATA }, null, null,				" date_modified desc");		cxt.startManagingCursor(mCursor);		int count = mCursor.getCount();		if (count > 0) {			List<FileType> data = new ArrayList<FileType>();			if (mCursor.moveToFirst()) {				do {					FileType.Builder builder = new FileType.Builder(mCursor.getString(0));					FileType bxfile = builder.build();					if (null != bxfile)						data.add(bxfile);				} while (mCursor.moveToNext());			}			return data;		} else {			return null;		}	}	// external¶àÃ½ÌåÎÄ¼þ¼ÆÊý	public synchronized int getMediaFilesCnt(Activity cxt, Uri uri) {		Cursor mCursor = cxt.managedQuery(uri, new String[] { MediaStore.Audio.Media.DATA }, null, null, null);		cxt.startManagingCursor(mCursor);		int cnt = mCursor.getCount();		return cnt;	}}