package com.android.apparatus.files;import android.text.TextUtils;import com.android.apparatus.utils.FileUtils;import com.android.apparatus.utils.Utils;import java.io.File;import java.io.Serializable;public class FileType implements Comparable<FileType>, Serializable {	public enum MimeType {		IMAGE, // ͼƬ		VIDEO, // video		UNKNOWN// δ֪	}	private FileType() {	}	private String fileName; // �ļ���	private String fileUrl; // �ļ�url����·��	private String filePath; // �ļ�����·��	private boolean isDir;// �Ƿ����ļ���	private long lastModifyTime;// ����޸�ʱ��	private long fileSize;// ��С	private String fileSizeStr;// ��С�ַ���	private String lastModifyTimeStr;// ����޸�ʱ���ַ���	private MimeType mimeType;// mimeType	public String getFileUrl() {		return fileUrl;	}	public String getFileName() {		return fileName;	}	public String getFilePath() {		return filePath;	}	public boolean isDir() {		return isDir;	}	public long getLastModifyTime() {		return lastModifyTime;	}	public long getFileSize() {		return fileSize;	}	public String getFileSizeStr() {		return fileSizeStr;	}	public MimeType getMimeType() {		return mimeType;	}	public String getLastModifyTimeStr() {		return lastModifyTimeStr;	}	// �����ļ�builderģʽ	public static class Builder {		FileType mFile;		public Builder(String path) {			if (FileUtils.isFileExist(path)) {				File file = new File(path);				mFile = new FileType();				mFile.fileName = file.getName();				mFile.filePath = file.getAbsolutePath();				boolean isDir = file.isDirectory();				mFile.isDir = isDir;				if (!isDir) {					mFile.fileSize = file.length();					mFile.fileSizeStr = FileUtils.getFileSizeStr(mFile.fileSize);					mFile.lastModifyTime = file.lastModified();					mFile.lastModifyTimeStr = Utils.getDateTime(mFile.lastModifyTime);					String exspansion = FileUtils.getExspansion(mFile.fileName);					if (TextUtils.isEmpty(exspansion))						mFile.mimeType = MimeType.UNKNOWN;					else {						MimeType mimeType = FileManager.getInstance().getMimeType(exspansion);						mFile.mimeType = null == mimeType ? MimeType.UNKNOWN : mimeType;					}				}			}		}		public FileType build() {			return mFile;		}	}	// url�ļ�builderģʽ(���ڶ���Ϣ�������ļ���Ϣ��ʼ��)	public static class UrlBuilder {		FileType mFile;		public UrlBuilder(String fileUrl, String fileName, long fileSize, String savedPath) {			mFile = new FileType();			mFile.fileUrl = fileUrl;			mFile.fileName = fileName;			mFile.fileSize = fileSize;			mFile.fileSizeStr = FileUtils.getFileSizeStr(fileSize);			mFile.filePath = savedPath;			String exspansion = FileUtils.getExspansion(fileName);			if (TextUtils.isEmpty(exspansion))				mFile.mimeType = MimeType.UNKNOWN;			else {				MimeType mimeType = FileManager.getInstance().getMimeType(exspansion);				mFile.mimeType = null == mimeType ? MimeType.UNKNOWN : mimeType;			}		}		public FileType build() {			return mFile;		}	}	@Override	public int compareTo(FileType another) {		if (isDir()) {			if (another.isDir())				return fileName.compareToIgnoreCase(another.getFileName());			else				return -1;		} else {			if (another.isDir())				return 1;			else				return fileName.compareToIgnoreCase(another.getFileName());		}	}	@Override	public boolean equals(Object o) {		// TODO Auto-generated method stub		if (null == o)			return false;		if (o instanceof FileType) {			FileType other = (FileType) o;			return other.filePath.equals(filePath);		} else {			return false;		}	}	@Override	public int hashCode() {		// TODO Auto-generated method stub		return filePath.hashCode();	}}